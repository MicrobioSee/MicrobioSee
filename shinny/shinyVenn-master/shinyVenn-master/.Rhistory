#figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
wordcloud2(data,size=as.numeric(as.character(opt$size)),minSize=as.numeric(as.character(opt$minSize)),
gridSize=as.numeric(as.character(opt$gridSize)),fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,color=opt$color,backgroundColor=opt$backgroundColor,
#minRotation=opt$minRotation,maxRotation=opt$maxRotation,
shuffle=opt$shuffle,rotateRatio=as.numeric(as.character(opt$rotateRatio)),
shape=opt$shape,ellipticity=as.numeric(as.character(opt$ellipticity)),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
?wordcloud2
wordcloud2(demoFreq, size = 2, minRotation = -pi/2, maxRotation = -pi/2)
wordcloud2(demoFreq, size = 2, minRotation = -pi/6, maxRotation = -pi/6)
wordcloud2(demoFreq, size = 2, minRotation = -pi/4, maxRotation = -pi/4)
library("wordcloud2")
opt=read.csv('1.txt',header = FALSE) #读入参数文件
opt=t(opt)
colnames(opt)=opt[1,]
opt=data.frame(opt)
opt=opt[-c(1),]                               #整理输入参数，方便下一步传参
if(opt$data_path == 'demoFreq') {
data = demoFreq
} else {
data = read.csv(opt$data_path,header = FALSE)
}
wordcloud2(data,size=as.numeric(as.character(opt$size)),minSize=as.numeric(as.character(opt$minSize)),
gridSize=as.numeric(as.character(opt$gridSize)),fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,color=opt$color,backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(as.character(opt$minRotation)),maxRotation=pi/as.numeric(as.character(opt$maxRotation)),
shuffle=opt$shuffle,rotateRatio=as.numeric(as.character(opt$rotateRatio)),
shape=opt$shape,ellipticity=as.numeric(as.character(opt$ellipticity)),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
wordcloud2(data,size=as.numeric(as.character(opt$size)),minSize=as.numeric(as.character(opt$minSize)),
gridSize=as.numeric(as.character(opt$gridSize)),fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,color=opt$color,backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(as.character(opt$minRotation)),maxRotation=-pi/as.numeric(as.character(opt$maxRotation)),
shuffle=opt$shuffle,rotateRatio=as.numeric(as.character(opt$rotateRatio)),
shape=opt$shape,ellipticity=as.numeric(as.character(opt$ellipticity)),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
wordcloud2(data,size=as.numeric(as.character(opt$size)),minSize=as.numeric(as.character(opt$minSize)),
gridSize=as.numeric(as.character(opt$gridSize)),fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,color=opt$color,backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(as.character(opt$minRotation)),maxRotation=pi/as.numeric(as.character(opt$maxRotation)),
shuffle=opt$shuffle,rotateRatio=as.numeric(as.character(opt$rotateRatio)),
shape=opt$shape,ellipticity=as.numeric(as.character(opt$ellipticity)),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
opt$size
typeof(opt$size)
as.numeric(opt$size)
wordcloud2(data,size=as.numeric(opt$size),
minSize=as.numeric(opt$minSize),
gridSize=as.numeric(opt$gridSize),
fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,
color=opt$color,
backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(opt$minRotation),
maxRotation=pi/as.numeric(opt$maxRotation),
shuffle=opt$shuffle,
rotateRatio=as.numeric(opt$rotateRatio),
shape=opt$shape,
ellipticity=as.numeric(opt$ellipticity),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
opt=read.csv('defalut.csv',header = FALSE) #读入参数文件
picture=wordcloud2(data,size=as.numeric(opt$size),
minSize=as.numeric(opt$minSize),
gridSize=as.numeric(opt$gridSize),
fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,
color=opt$color,
backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(opt$minRotation),
maxRotation=pi/as.numeric(opt$maxRotation),
shuffle=opt$shuffle,
rotateRatio=as.numeric(opt$rotateRatio),
shape=opt$shape,
ellipticity=as.numeric(opt$ellipticity),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
View(picture)
wordcloud2(data,size=as.numeric(opt$size),
minSize=as.numeric(opt$minSize),
gridSize=as.numeric(opt$gridSize),
fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,
color=opt$color,
backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(opt$minRotation),
maxRotation=pi/as.numeric(opt$maxRotation),
shuffle=opt$shuffle,
rotateRatio=as.numeric(opt$rotateRatio),
shape=opt$shape,
ellipticity=as.numeric(opt$ellipticity),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
dev.off()
pdf(picture)
picture=wordcloud2(data,size=as.numeric(opt$size),
minSize=as.numeric(opt$minSize),
gridSize=as.numeric(opt$gridSize),
fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,
color=opt$color,
backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(opt$minRotation),
maxRotation=pi/as.numeric(opt$maxRotation),
shuffle=opt$shuffle,
rotateRatio=as.numeric(opt$rotateRatio),
shape=opt$shape,
ellipticity=as.numeric(opt$ellipticity),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
pdf(picture)
pdf(~)
pdf('C:\Users\12236\Documents\new_job')
pdf('C://Users\12236\Documents\new_job')
pdf('C://Users//12236//Documents//new_job')
pdf('C:\\Users\\12236\\Documents\\new_job')
pdf()
if(opt$data_path == 'demoFreq') {
data = demoFreq
} else {
data = read.csv(opt$data_path,header = FALSE)
}
picture=wordcloud2(data,size=as.numeric(opt$size),
minSize=as.numeric(opt$minSize),
gridSize=as.numeric(opt$gridSize),
fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,
color=opt$color,
backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(opt$minRotation),
maxRotation=pi/as.numeric(opt$maxRotation),
shuffle=opt$shuffle,
rotateRatio=as.numeric(opt$rotateRatio),
shape=opt$shape,
ellipticity=as.numeric(opt$ellipticity),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
pdf()
print(picture)
dev.off()
png("myplot.png")
dev.off()
dev.off()
#data=read.csv(opt$data_path,header = FALSE)   #读入画图的data
png("myplot.png")
picture=wordcloud2(data,size=as.numeric(opt$size),
minSize=as.numeric(opt$minSize),
gridSize=as.numeric(opt$gridSize),
fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,
color=opt$color,
backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(opt$minRotation),
maxRotation=pi/as.numeric(opt$maxRotation),
shuffle=opt$shuffle,
rotateRatio=as.numeric(opt$rotateRatio),
shape=opt$shape,
ellipticity=as.numeric(opt$ellipticity),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
print(picture)
dev.off()
getwd()
picture=wordcloud2(data,size=as.numeric(opt$size),
minSize=as.numeric(opt$minSize),
gridSize=as.numeric(opt$gridSize),
fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,
color=opt$color,
backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(opt$minRotation),
maxRotation=pi/as.numeric(opt$maxRotation),
shuffle=opt$shuffle,
rotateRatio=as.numeric(opt$rotateRatio),
shape=opt$shape,
ellipticity=as.numeric(opt$ellipticity),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
print(picture)
dev.off()
#print(picture)
#dev.off()
ggsave("a.png")
library("ggplot2")
picture=wordcloud2(data,size=as.numeric(opt$size),
minSize=as.numeric(opt$minSize),
gridSize=as.numeric(opt$gridSize),
fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,
color=opt$color,
backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(opt$minRotation),
maxRotation=pi/as.numeric(opt$maxRotation),
shuffle=opt$shuffle,
rotateRatio=as.numeric(opt$rotateRatio),
shape=opt$shape,
ellipticity=as.numeric(opt$ellipticity),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
print(picture)
#dev.off()
ggsave("a.png")
View(picture)
wordcloud2(data,size=as.numeric(opt$size),
minSize=as.numeric(opt$minSize),
gridSize=as.numeric(opt$gridSize),
fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,
color=opt$color,
backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(opt$minRotation),
maxRotation=pi/as.numeric(opt$maxRotation),
shuffle=opt$shuffle,
rotateRatio=as.numeric(opt$rotateRatio),
shape=opt$shape,
ellipticity=as.numeric(opt$ellipticity),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
library("wordcloud2")
library("ggplot2")
wordcloud2(data,size=as.numeric(opt$size),
minSize=as.numeric(opt$minSize),
gridSize=as.numeric(opt$gridSize),
fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,
color=opt$color,
backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(opt$minRotation),
maxRotation=pi/as.numeric(opt$maxRotation),
shuffle=opt$shuffle,
rotateRatio=as.numeric(opt$rotateRatio),
shape=opt$shape,
ellipticity=as.numeric(opt$ellipticity),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
#dev.off()
ggsave("a.png")
library('ggplot2')
library('reshape2')
install.packages("reshape2")
library('ggplot2')
library('reshape2')
A = c("A","B","C","D","E")
B = c(90,34,56,99,15)
C = c(50,20,24,70,14)
dat = data.frame(A,B,C)
names(dat) = c("type","sample1","sample2")
dat = melt(dat,variable.name="Sample",value.name = "Num")
head(dat)
p = ggplot(dat, aes(x = type,y = Num,fill = Sample))+
#####这部分的position = "dodge"，并排肩并肩的柱状图
geom_bar(stat ="identity",width = 0.6,position = "dodge")+
scale_fill_manual(values = c("red","blue"))+                 #########设定颜色
labs(x = "",y = "", title = "test")+                        ############坐标标签和图片title
geom_text(aes(label = dat$Num),position=position_dodge(width = 0.5),size = 5,vjust = -0.25)+ ###########设置柱子上的标签文字，文字的position_dodge(width=0.5)设置，保证分隔宽度。
guides(fill = guide_legend(reverse = F))+                  ##############图例顺序反转
theme(plot.title = element_text(size = 25,face = "bold", vjust = 0.5, hjust = 0.5),   ######图片title文字大小位置
legend.title = element_blank(),                    ##########图例名称为空
legend.text = element_text(size = 18, face = "bold"),        ##########图例文字大小
legend.position = 'right',               ############图例位置
legend.key.size=unit(0.8,'cm'))             #############图例大小
print(p)
View(p)
ggsave(p,filename = "p.pdf",width = 12,height = 9)
p=wordcloud2(data,size=as.numeric(opt$size),
minSize=as.numeric(opt$minSize),
gridSize=as.numeric(opt$gridSize),
fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,
color=opt$color,
backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(opt$minRotation),
maxRotation=pi/as.numeric(opt$maxRotation),
shuffle=opt$shuffle,
rotateRatio=as.numeric(opt$rotateRatio),
shape=opt$shape,
ellipticity=as.numeric(opt$ellipticity),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
#dev.off()
ggsave(p,"a.png")
#dev.off()
ggsave(p,filename = "p.pdf",width = 12,height = 9)
?wordcloud2
??wordcloud2
saveWidget(p,"tmp.html",selfcontained = F) #先保存为网页格式
p=wordcloud2(data,size=as.numeric(opt$size),
minSize=as.numeric(opt$minSize),
gridSize=as.numeric(opt$gridSize),
fontFamily=opt$fontFamily,
fontWeight=opt$fontWeight,
color=opt$color,
backgroundColor=opt$backgroundColor,
minRotation=-pi/as.numeric(opt$minRotation),
maxRotation=pi/as.numeric(opt$maxRotation),
shuffle=opt$shuffle,
rotateRatio=as.numeric(opt$rotateRatio),
shape=opt$shape,
ellipticity=as.numeric(opt$ellipticity),
#widgetsize=opt$widgetsize,figPath=opt$figPath,hoverFunction=opt$hoverFunction)
)
saveWidget(p,"tmp.html",selfcontained = F) #先保存为网页格式
library(webshot)
install.packages("webshot")
library(webshot)
saveWidget(p,"tmp.html",selfcontained = F) #先保存为网页格式
webshot::install_phantomjs()
library(htmlwidgets)
#webshot::install_phantomjs()#首次使用需要执行
saveWidget(p,"tmp.html",selfcontained = F) #先保存为网页格式
webshot("tmp.html","wordcloud.jpg", delay = 3,vwidth = 1000, vheight=1000) #在依据网页格式生成jpg图片格式
rm(list=ls())
install.packages('yarrr')
#基本海盗图
str(pirates)
pirateplot(formula = age ~ favorite.pirate,
data = pirates,
xlab = 'Favorite Pirate',
ylab = 'Age',
main="")
#install.packages('yarrr')
library(yarrr)
#基本海盗图
str(pirates)
pirateplot(formula = age ~ favorite.pirate,
data = pirates,
xlab = 'Favorite Pirate',
ylab = 'Age',
main="")
pirates
a=pirates
View(a)
typeof(a)
#基本海盗图
str(pirates)
#基本海盗图
a=str(pirates)
#基本海盗图
str(pirates)
pirateplot(formula = age ~ favorite.pirate,
data = pirates,
xlab = 'Favorite Pirate',
ylab = 'Age',
main="")
?pirateplot
pirateplot(formula = weight ~ Time,
data = ChickWeight)
pirateplot(formula = weight ~ Time,
data = ChickWeight,
pal = "gray")
?pirateplot
pirateplot(formula = age ~ favorite.pirate+sex,
data = pirates,
xlab = 'Favorite Pirate',
ylab = 'Age',
main="")
pirateplot(formula = age ~ favorite.pirate*sex,
data = pirates,
xlab = 'Favorite Pirate',
ylab = 'Age',
main="")
pirateplot(formula = age ~ sex + favorite.pirate,
data = pirates,
xlab = 'Favorite Pirate',
ylab = 'Age',
main="")
pirateplot(formula = age ~ sex + favorite.pirate,
data = pirates,
xlab = 'Favorite Pirate',
ylab = 'Age',
main="")
pirateplot(formula = age ~ sex + favorite.pirate,
data = pirates,
xlab = 'Favorite Pirate & SEX',
ylab = 'Age',
main="haha")
pirateplot(formula = age ~ sex + favorite.pirate,
data = pirates,
ylab = 'Age',
main="haha")
opt=read.csv("defult.hd.csv",header = TRUE)
View(opt)
typeof(opt)
opt$0
opt$1
opt$c
opt$chao
opt$group1
opt[,1]
opt[,2]
opt[,3]
opt[,4]
opt[,4]
colnames(data)
colnames(opt)
col=colnames(opt)
col(1)
col[1]
typeof(col[1])
typeof(col[1])
length(col)
?pirateplot
?yarrr
??yarrr
yarrr.guide()
piratepal("all")
piratepal("all")
piratepal("pony")
data=opt
rm(opt)
pirateplot(formula = col[1] ~ col[2],
data = data,
ylab = col[1],
xlab = col[2],
main="",
)
col = colnames(data)
pirateplot(formula = col[1] ~ col[2],
data = data,
ylab = col[1],
xlab = col[2],
main="",
)
View(data)
pirateplot(formula = chao ~ group1,
data = data,
ylab = col[1],
xlab = col[2],
main="",
)
pirateplot(formula = weight ~ Time,
data = ChickWeight,
pal = "pony",
theme = 1,
main = "pony color palette")
ChickWeight
View(data)
data[,1]
opt = read.csv("opt.csv",header = FALSE)
pirateplot(formula = data[,1] ~ data[,2],
data = data,
ylab = col[1],
xlab = col[2],
main="",
)
pirateplot(formula = data[,1] ~ data[,2],
data = data,
ylab = ,
xlab = col[2],
main="",
)
pirateplot(formula = data[,1] ~ data[,2],
data = data,
ylab = ,
xlab = ,
main="",
)
pirateplot(formula = data[,1] ~ data[,2],
data = data,
main="",
)
pirateplot(formula = data[,1] ~ data[,2],
data = data,
main="",
)
main = "pony color palette")
pirateplot(formula = data[,1] ~ data[,2],
data = data,
main="",
)
?pirateplot\
?pirateplot
pirateplot(formula = weight ~ Time,
data = ChickWeight,
theme = 2, # theme 2
pal = "xmen", # xmen palette
main = "Chicken weights by Time",
point.o = .4, # Add points
point.col = "black",
point.bg = "white",
point.pch = 21,
bean.f.o = .2, # Turn down bean filling
inf.f.o = .8, # Turn up inf filling
gl.col = "gray", # gridlines
gl.lwd = c(.5, 0)) # turn off minor grid lines
png()
pirateplot(formula = data[,1] ~ data[,2],
data = data,
main = opt$mian,
pal = opt$pal,
theme = opt$theme
)
pirateplot(formula = data[,1] ~ data[,2],
data = data,
#main = opt$mian,
#pal = opt$pal,
#theme = opt$theme
)
dev.off()
?pirateplot
png()
pirateplot(formula = weight ~ Time,
data = ChickWeight)
dev.off()
shiny::runApp('shinyVenn-master/shinyVenn-master')
runApp('shinyVenn-master/shinyVenn-master')
