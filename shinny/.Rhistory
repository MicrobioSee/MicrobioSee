opt[,1]
opt[,2]
opt[,3]
opt[,4]
opt[,4]
colnames(data)
colnames(opt)
col=colnames(opt)
col(1)
col[1]
typeof(col[1])
typeof(col[1])
length(col)
?pirateplot
?yarrr
??yarrr
yarrr.guide()
piratepal("all")
piratepal("all")
piratepal("pony")
data=opt
rm(opt)
pirateplot(formula = col[1] ~ col[2],
data = data,
ylab = col[1],
xlab = col[2],
main="",
)
col = colnames(data)
pirateplot(formula = col[1] ~ col[2],
data = data,
ylab = col[1],
xlab = col[2],
main="",
)
View(data)
pirateplot(formula = chao ~ group1,
data = data,
ylab = col[1],
xlab = col[2],
main="",
)
pirateplot(formula = weight ~ Time,
data = ChickWeight,
pal = "pony",
theme = 1,
main = "pony color palette")
ChickWeight
View(data)
data[,1]
opt = read.csv("opt.csv",header = FALSE)
pirateplot(formula = data[,1] ~ data[,2],
data = data,
ylab = col[1],
xlab = col[2],
main="",
)
pirateplot(formula = data[,1] ~ data[,2],
data = data,
ylab = ,
xlab = col[2],
main="",
)
pirateplot(formula = data[,1] ~ data[,2],
data = data,
ylab = ,
xlab = ,
main="",
)
pirateplot(formula = data[,1] ~ data[,2],
data = data,
main="",
)
pirateplot(formula = data[,1] ~ data[,2],
data = data,
main="",
)
main = "pony color palette")
pirateplot(formula = data[,1] ~ data[,2],
data = data,
main="",
)
?pirateplot\
?pirateplot
pirateplot(formula = weight ~ Time,
data = ChickWeight,
theme = 2, # theme 2
pal = "xmen", # xmen palette
main = "Chicken weights by Time",
point.o = .4, # Add points
point.col = "black",
point.bg = "white",
point.pch = 21,
bean.f.o = .2, # Turn down bean filling
inf.f.o = .8, # Turn up inf filling
gl.col = "gray", # gridlines
gl.lwd = c(.5, 0)) # turn off minor grid lines
png()
pirateplot(formula = data[,1] ~ data[,2],
data = data,
main = opt$mian,
pal = opt$pal,
theme = opt$theme
)
pirateplot(formula = data[,1] ~ data[,2],
data = data,
#main = opt$mian,
#pal = opt$pal,
#theme = opt$theme
)
dev.off()
?pirateplot
png()
pirateplot(formula = weight ~ Time,
data = ChickWeight)
dev.off()
rm(list=ls())
library(pheatmap)
a=read.csv("111.csv",row.names = 1)
pdf(file = "zmchp1.pdf",height = 10,width = 10)
pheatmap(as.matrix(a),#scale = "row",
color = colorRampPalette(c('#3D79F3FF', "white", "#E6352FFF"))(20),
border_color = "white",cellwidth = 8, cellheight = 8,
fontsize_row = 5,
fontsize_col = 5,
cluster_rows = FALSE,
cluster_cols = FALSE
#angle_col = 45
)
dev.off()
pdf(file = "zmchp1.pdf",height = 10,width = 10)
pheatmap(as.matrix(a),#scale = "row",
color = colorRampPalette(c('#3D79F3FF', "white", "#E6352FFF"))(20),
border_color = "white",cellwidth = 8, cellheight = 8,
fontsize_row = 5,
fontsize_col = 5,
#cluster_rows = FALSE,
#cluster_cols = FALSE
#angle_col = 45
)
dev.off()
png(file = "zmchp1.png",height = 10,width = 10)
pheatmap(as.matrix(a),#scale = "row",
color = colorRampPalette(c('#3D79F3FF', "white", "#E6352FFF"))(20),
border_color = "white",cellwidth = 8, cellheight = 8,
fontsize_row = 5,
fontsize_col = 5,
#cluster_rows = FALSE,
#cluster_cols = FALSE
#angle_col = 45
)
dev.off()
png(file = "zmchp1.png",height = 200,width = 200)
pheatmap(as.matrix(a),#scale = "row",
color = colorRampPalette(c('#3D79F3FF', "white", "#E6352FFF"))(20),
border_color = "white",cellwidth = 8, cellheight = 8,
fontsize_row = 5,
fontsize_col = 5,
#cluster_rows = FALSE,
#cluster_cols = FALSE
#angle_col = 45
)
dev.off()
png(file = "zmchp1.png",height = 1000,width = 1000)
pheatmap(as.matrix(a),#scale = "row",
color = colorRampPalette(c('#3D79F3FF', "white", "#E6352FFF"))(20),
border_color = "white",cellwidth = 8, cellheight = 8,
fontsize_row = 5,
fontsize_col = 5,
#cluster_rows = FALSE,
#cluster_cols = FALSE
#angle_col = 45
)
dev.off()
png(file = "zmchp1.png",height = 800,width = 800)
pheatmap(as.matrix(a),#scale = "row",
color = colorRampPalette(c('#3D79F3FF', "white", "#E6352FFF"))(20),
border_color = "white",cellwidth = 8, cellheight = 8,
fontsize_row = 5,
fontsize_col = 5,
#cluster_rows = FALSE,
#cluster_cols = FALSE
#angle_col = 45
)
dev.off()
png(file = "zmchp1.png",height = 600,width = 600)
pheatmap(as.matrix(a),#scale = "row",
color = colorRampPalette(c('#3D79F3FF', "white", "#E6352FFF"))(20),
border_color = "white",cellwidth = 8, cellheight = 8,
fontsize_row = 5,
fontsize_col = 5,
#cluster_rows = FALSE,
#cluster_cols = FALSE
#angle_col = 45
)
dev.off()
png(file = "zmchp1.png",height = 600,width = 600,pointsize = 300)
pheatmap(as.matrix(a),#scale = "row",
color = colorRampPalette(c('#3D79F3FF', "white", "#E6352FFF"))(20),
border_color = "white",cellwidth = 8, cellheight = 8,
fontsize_row = 5,
fontsize_col = 5,
#cluster_rows = FALSE,
#cluster_cols = FALSE
#angle_col = 45
)
dev.off()
png(file = "zmchp11.png",height = 500,width = 500,pointsize = 300)
pheatmap(as.matrix(a),#scale = "row",
color = colorRampPalette(c('#3D79F3FF', "white", "#E6352FFF"))(20),
border_color = "white",cellwidth = 8, cellheight = 8,
fontsize_row = 5,
fontsize_col = 5,
#cluster_rows = FALSE,
#cluster_cols = FALSE
#angle_col = 45
)
dev.off()
png(file = "zmchp11.png",height = 500,width = 500,pointsize = 900)
pheatmap(as.matrix(a),#scale = "row",
color = colorRampPalette(c('#3D79F3FF', "white", "#E6352FFF"))(20),
border_color = "white",cellwidth = 8, cellheight = 8,
fontsize_row = 5,
fontsize_col = 5,
#cluster_rows = FALSE,
#cluster_cols = FALSE
#angle_col = 45
)
dev.off()
png(file = "zmchp11.png",height = 200,width = 200,pointsize = 900)
pheatmap(as.matrix(a),#scale = "row",
color = colorRampPalette(c('#3D79F3FF', "white", "#E6352FFF"))(20),
border_color = "white",cellwidth = 8, cellheight = 8,
fontsize_row = 5,
fontsize_col = 5,
#cluster_rows = FALSE,
#cluster_cols = FALSE
#angle_col = 45
)
dev.off()
png(file = "zmchp11.png",height = 400,width = 400,pointsize = 900)
pheatmap(as.matrix(a),#scale = "row",
color = colorRampPalette(c('#3D79F3FF', "white", "#E6352FFF"))(20),
border_color = "white",cellwidth = 8, cellheight = 8,
fontsize_row = 5,
fontsize_col = 5,
#cluster_rows = FALSE,
#cluster_cols = FALSE
#angle_col = 45
)
dev.off()
shiny::runApp('shinny/new')
runApp('shinny/new')
paste('stack_column_charts',format(Sys.time(), "%s"),sep = ".")
?downloadButton\
?downloadButton
?jpeg
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
?pdf
?png
runApp('shinny/new')
runApp('shinny/new')
jpeg(file = "myplot.jpeg")
example(rect)
dev.off()
?svg
runApp('shinny/new')
runApp('shinny/new')
?write_file
?write_csv
?plot
Speed <- cars$speed
Distance <- cars$dist
plot(Speed, Distance, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue")
Speed <- cars$speed
Distance <- cars$dist
plot(Speed, Distance, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue")
runApp('shinny/new')
runApp('shinny/new')
runApp()
runApp('shinny/new')
runApp('shinny/new')
jpeg(file,  width ,  height ,units = "px",res=dpi)
stack(data,sline,stheme,color)
dev.off()
?ggplot
transform()
?transform()
?position_jitter
#install.packages('yarrr')
library(yarrr)
?pirateplot
runApp('shinny/new')
dev.off()
runApp('shinny/new')
stack <- function(data,sline,stheme,color){
tempdata <- data
for (i in 2:ncol(data)){data[,i]<-percentage(data[,i])}
data <- arrange(data,desc(data[,1]))
for (i in 2:ncol(data)){
x_name = paste0('mu',i)
assign(x_name,cumsum(data[,i]))
data <- cbind(data,get(paste0('mu',i)))
colnames(data)[ncol(data)] <- paste0("mu",i)
}
datasum <- data
data <- tempdata
for (i in 2:ncol(data)){data[,i]<-percentage(data[,i])}
data <- arrange(data,desc(data[,1]))
mydata <- melt(data,id.vars = 1)
mydata <- arrange(mydata,mydata[,1])
#以上代码用于读数据并处理，得到data，mydata和datasum
#下面开始画图
p <- ggplot(mydata,aes(variable,value,fill=Bacteria))+geom_bar(stat="identity",width = 0.5)+scale_y_continuous(expand=c(0,0)) #画柱子,设边距
#先画出柱子，然后画连接线
if(sline == "straight"){
if(ncol(data) == 2){
p <- p
} else if(ncol(data) == 3){
p <- p + geom_segment(data = datasum,aes(x=1.25, xend=1.75, y=mu2, yend=mu3))
} else if(ncol(data) == 4){
p <- p + geom_segment(data = datasum,aes(x=1.25, xend=1.75, y=mu2, yend=mu3)) +
geom_segment(data = datasum,aes(x=2.25, xend=2.75, y=mu3, yend=mu4))
} else if(ncol(data) == 5){
p <- p + geom_segment(data = datasum,aes(x=1.25, xend=1.75, y=mu2, yend=mu3)) +
geom_segment(data = datasum,aes(x=2.25, xend=2.75, y=mu3, yend=mu4)) +
geom_segment(data = datasum,aes(x=3.25, xend=3.75, y=mu4, yend=mu5))
} else if(ncol(data) == 6){
p <- p + geom_segment(data = datasum,aes(x=1.25, xend=1.75, y=mu2, yend=mu3)) +
geom_segment(data = datasum,aes(x=2.25, xend=2.75, y=mu3, yend=mu4)) +
geom_segment(data = datasum,aes(x=3.25, xend=3.75, y=mu4, yend=mu5)) +
geom_segment(data = datasum,aes(x=4.25, xend=4.75, y=mu5, yend=mu6))
} else if(ncol(data) == 7){
p <- p + geom_segment(data = datasum,aes(x=1.25, xend=1.75, y=mu2, yend=mu3)) +
geom_segment(data = datasum,aes(x=2.25, xend=2.75, y=mu3, yend=mu4)) +
geom_segment(data = datasum,aes(x=3.25, xend=3.75, y=mu4, yend=mu5)) +
geom_segment(data = datasum,aes(x=4.25, xend=4.75, y=mu5, yend=mu6)) +
geom_segment(data = datasum,aes(x=5.25, xend=5.75, y=mu6, yend=mu7))
} else if(ncol(data) == 8){
p <- p + geom_segment(data = datasum,aes(x=1.25, xend=1.75, y=mu2, yend=mu3)) +
geom_segment(data = datasum,aes(x=2.25, xend=2.75, y=mu3, yend=mu4)) +
geom_segment(data = datasum,aes(x=3.25, xend=3.75, y=mu4, yend=mu5)) +
geom_segment(data = datasum,aes(x=4.25, xend=4.75, y=mu5, yend=mu6)) +
geom_segment(data = datasum,aes(x=5.25, xend=5.75, y=mu6, yend=mu7)) +
geom_segment(data = datasum,aes(x=6.25, xend=6.75, y=mu7, yend=mu8))
}
}else if (sline == "curve"){
if(ncol(data) == 2){
p <- p
} else if(ncol(data) == 3){
p <- p+
geom_curve(data = datasum[-nrow(datasum),],aes(x=1.25, xend=1.5, y=mu2, yend=(mu2+mu3)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=1.5, xend=1.75, y=(mu2+mu3)/2, yend=mu3),curvature = -0.05,angle = 95)
} else if(ncol(data) == 4){
p <- p+
geom_curve(data = datasum[-nrow(datasum),],aes(x=1.25, xend=1.5, y=mu2, yend=(mu2+mu3)/2),curvature = 0.05,angle = 80)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=1.5, xend=1.75, y=(mu2+mu3)/2, yend=mu3),curvature = -0.05,angle = 100)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=2.25, xend=2.5, y=mu3, yend=(mu3+mu4)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=2.5, xend=2.75, y=(mu3+mu4)/2, yend=mu4),curvature = -0.05,angle = 95)
} else if(ncol(data) == 5){
p <- p+
geom_curve(data = datasum[-nrow(datasum),],aes(x=1.25, xend=1.5, y=mu2, yend=(mu2+mu3)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=1.5, xend=1.75, y=(mu2+mu3)/2, yend=mu3),curvature = -0.05,angle = 95)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=2.25, xend=2.5, y=mu3, yend=(mu3+mu4)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=2.5, xend=2.75, y=(mu3+mu4)/2, yend=mu4),curvature = -0.05,angle = 95) +
geom_curve(data = datasum[-nrow(datasum),],aes(x=3.25, xend=3.5, y=mu4, yend=(mu4+mu5)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=3.5, xend=3.75, y=(mu4+mu5)/2, yend=mu5),curvature = -0.05,angle = 95)
} else if(ncol(data) == 6){
p <- p+
geom_curve(data = datasum[-nrow(datasum),],aes(x=1.25, xend=1.5, y=mu2, yend=(mu2+mu3)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=1.5, xend=1.75, y=(mu2+mu3)/2, yend=mu3),curvature = -0.05,angle = 95)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=2.25, xend=2.5, y=mu3, yend=(mu3+mu4)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=2.5, xend=2.75, y=(mu3+mu4)/2, yend=mu4),curvature = -0.05,angle = 95) +
geom_curve(data = datasum[-nrow(datasum),],aes(x=3.25, xend=3.5, y=mu4, yend=(mu4+mu5)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=3.5, xend=3.75, y=(mu4+mu5)/2, yend=mu5),curvature = -0.05,angle = 95)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=4.25, xend=4.5, y=mu5, yend=(mu5+mu6)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=4.5, xend=4.75, y=(mu5+mu6)/2, yend=mu6),curvature = -0.05,angle = 95)
} else if(ncol(data) == 7){
p <- p+
geom_curve(data = datasum[-nrow(datasum),],aes(x=1.25, xend=1.5, y=mu2, yend=(mu2+mu3)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=1.5, xend=1.75, y=(mu2+mu3)/2, yend=mu3),curvature = -0.05,angle = 95)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=2.25, xend=2.5, y=mu3, yend=(mu3+mu4)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=2.5, xend=2.75, y=(mu3+mu4)/2, yend=mu4),curvature = -0.05,angle = 95) +
geom_curve(data = datasum[-nrow(datasum),],aes(x=3.25, xend=3.5, y=mu4, yend=(mu4+mu5)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=3.5, xend=3.75, y=(mu4+mu5)/2, yend=mu5),curvature = -0.05,angle = 95)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=4.25, xend=4.5, y=mu5, yend=(mu5+mu6)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=4.5, xend=4.75, y=(mu5+mu6)/2, yend=mu6),curvature = -0.05,angle = 95)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=5.25, xend=5.5, y=mu6, yend=(mu6+mu7)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=5.5, xend=5.75, y=(mu6+mu7)/2, yend=mu7),curvature = -0.05,angle = 95)
} else if(ncol(data) == 8){
p <- p+
geom_curve(data = datasum[-nrow(datasum),],aes(x=1.25, xend=1.5, y=mu2, yend=(mu2+mu3)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=1.5, xend=1.75, y=(mu2+mu3)/2, yend=mu3),curvature = -0.05,angle = 95)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=2.25, xend=2.5, y=mu3, yend=(mu3+mu4)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=2.5, xend=2.75, y=(mu3+mu4)/2, yend=mu4),curvature = -0.05,angle = 95) +
geom_curve(data = datasum[-nrow(datasum),],aes(x=3.25, xend=3.5, y=mu4, yend=(mu4+mu5)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=3.5, xend=3.75, y=(mu4+mu5)/2, yend=mu5),curvature = -0.05,angle = 95)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=4.25, xend=4.5, y=mu5, yend=(mu5+mu6)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=4.5, xend=4.75, y=(mu5+mu6)/2, yend=mu6),curvature = -0.05,angle = 95)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=5.25, xend=5.5, y=mu6, yend=(mu6+mu7)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=5.5, xend=5.75, y=(mu6+mu7)/2, yend=mu7),curvature = -0.05,angle = 95)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=6.25, xend=6.5, y=mu7, yend=(mu7+mu8)/2),curvature = 0.05,angle = 85)+
geom_curve(data = datasum[-nrow(datasum),],aes(x=6.5, xend=6.75, y=(mu7+mu8)/2, yend=mu8),curvature = -0.05,angle = 95)
}
}
#主题开关，定义背景色主要用了ggtheme
if (stheme == "bw"){p<-p+theme_bw()}else if (stheme == "classic"){p<-p+theme_classic()}else if (stheme == "economist"){p<-p+theme_economist()}else if (stheme == "fivethirtyeight"){p<-p+theme_fivethirtyeight()}else if (stheme == "map"){p<-p+theme_map()}else if (stheme == "base"){p<-p+theme_base()}else if (stheme == "wsj"){p<-p+theme_wsj()}else if (stheme == "dark"){p<-p+theme_dark()}
#柱子调色开关，定义柱子的颜色，主要参考ggsci
if (color == "npg"){p<-p+scale_fill_npg()}else if (color == "nejm"){p<-p+scale_fill_nejm()}else if (color == "lancet"){p<-p+scale_fill_lancet()}else if (color == "rickandmorty"){p<-p+scale_fill_rickandmorty()}else if (color == "tron"){p<-p+scale_fill_tron()}else if (color == "grey"){p<-p+scale_fill_grey()}
#出图
p
# if (pic == "png"){
#   ggsave(filename = "user_plot/time.wc.png",plot = p,height =as.numeric(height) ,width =as.numeric(width) ,units =unit ,dpi =as.numeric(dpi))
# } else if (pic == "pdf"){
#   ggsave(filename = "user_plot/time.wc.pdf",plot = p,height =as.numeric(height) ,width =as.numeric(width) ,units =unit ,dpi =as.numeric(dpi))
# } else if (pic == "jpeg"){
#   ggsave(filename = "user_plot/time.wc.jpeg",plot = p,height =as.numeric(height) ,width =as.numeric(width) ,units =unit ,dpi =as.numeric(dpi))
# }
}
percentage <- function(arg1){
arg1 <- arg1/sum(arg1)
return(arg1)} #前提准备
getwd()
png(filename = "hhhhplot.png")
df = read.csv("shinny/new/default.csv")
stack(data = df,stheme = "bw",sline = "straight",color = "npg")
dev.off()
?downloadHandler
?content
runApp('shinny/new')
runApp('shinny/new')
install.packages("shinythemes")
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
?shinytheme
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
?titlePanel
runApp('shinny/new')
?icon
?dashboardBody
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
?sidebarPanel
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
?sidebarPanel
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
runApp('shinny/new')
?sidebarPanel
?tags\
?tags
runApp('shinny/new')
?tags$tstyle
?tags$style
?bs_vars_alert
if (interactive()) {
library(shiny)
ui <- fluidPage(
use_theme(
create_theme(
theme = "default",
bs_vars_alert(
border_radius = "15px",
bs_vars_badge 9
success_bg = "forestgreen",
success_text = "#FFF",
danger_bg = "firebrick",
danger_text = "#FFF"
),
output_file = NULL
)
),
tags$br(),
tags$div(
class = "alert alert-success",
"This is an alert !"
),
tags$div(
class = "alert alert-danger",
"This is an other alert !"
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
}
bs_vars_alert(
border_radius = "10px", # increase border radius,
success_bg = "#c9d175" # change color for success alerts
)
shiny::runApp('shinyVenn-master/shinyVenn-master')
setwd("shinny/")
